from func_generate_text import generate_text
from telegram_bot_api_token import API_TOKEN # API-—Ç–æ–∫–µ–Ω –±–æ—Ç–∞

# -------------------- Imports --------------------
# import numpy as np
# import pandas as pd
# import re
# import random
# import transformers
# import textwrap
import torch
from tqdm.notebook import tqdm # –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä


import logging # —á—Ç–æ–±—ã —Å–ª–µ–¥–∏—Ç—å, –∫–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç
from aiogram import Bot, Dispatcher, executor, types  # 4 –∫–ª–∞—Å—Å–∞ –¥–ª—è —Ç–≥-–±–æ—Ç–∞
from aiogram.types import ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton

# -------------------- Loading model --------------------
from transformers import GPT2Tokenizer # –∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
# –∏–ª–∏ .... !!!!

device = 'cuda' if torch.cuda.is_available() else 'cpu'

# -------------------- Configure logging --------------------
logging.basicConfig(level=logging.INFO)

# -------------------- Initialize bot and dispatcher ------------------------
bot = Bot(token=API_TOKEN) # –∑–∞–¥–∞—ë–º –±–æ—Ç–∞
dp = Dispatcher(bot) # –∑–∞–¥–∞—ë–º –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞

# ----------------------- Actions & buttons ---------------------------

button_start = KeyboardButton('Start \U0001F4D6') # –∏–ª–∏ üëã
start_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button_start)
button_help = KeyboardButton('Help \u2753')
help_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(button_help)

greating = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, –¥—Ä—É–≥! \n–û—Ç–ø—Ä–∞–≤–ª—è–µ–º—Å—è –≤ –ü–µ—Ç—É—à–∫–∏ \U0001F689 —Å –º–∏–Ω—É—Ç—ã –Ω–∞ –º–∏–Ω—É—Ç—É! \n–ù–∞–ø–∏—à–∏ –ø–∞—Ä—É —Å–ª–æ–≤."
help_text = "–Ø - —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç, –æ–±—É—á–µ–Ω–Ω—ã–π –Ω–∞ –ø–æ—ç–º–µ –í.–ï—Ä–æ—Ñ–µ–µ–≤–∞ '–ú–æ—Å–∫–≤–∞-–ü–µ—Ç—É—à–∫–∏'. \n–ò—Å–ø–æ–ª—å–∑—É—è –º–æ–¥–µ–ª—å GPT2, —è –º–æ–≥—É –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—Å—Ç –∑–∞ —Ç–æ–±–æ–π –≤ —Å—Ç–∏–ª–µ —ç—Ç–æ–≥–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è. –ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–∞—Ä—É —Å–ª–æ–≤! :)"

@dp.message_handler(commands=['start']) # –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /start
async def process_start_command(message: types.Message):
    await message.reply(greating, reply_markup=help_kb) 

@dp.message_handler(regexp='Start \U0001F4D6') # —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ "Start"
async def replaing_start(message): 
    await message.reply("–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ø–∞—Ä—É —Å–ª–æ–≤, –∞ —è –ø—Ä–æ–¥–æ–ª–∂—É –≤ —Å—Ç–∏–ª–µ –ï—Ä–æ—Ñ–µ–µ–≤–∞", reply_markup=help_kb)    

@dp.message_handler(commands=['help']) # –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ /help
async def process_start_command(message: types.Message):
    await message.reply(help_text, reply_markup=start_kb) 

@dp.message_handler(regexp='Help \u2753') # —á—Ç–æ –¥–µ–ª–∞–µ—Ç –∫–Ω–æ–ø–∫–∞ "Help"
async def replaing_help(message): 
    await message.reply(help_text, reply_markup=start_kb) 

@dp.message_handler()
async def echo(message: types.Message):

    my_out = generate_text(message['text'])

    await message.answer(my_out)


if __name__ == '__main__': # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True) # "–≤—ã–ø–æ–ª–Ω—è–ª—å—â–∏–∫" :)